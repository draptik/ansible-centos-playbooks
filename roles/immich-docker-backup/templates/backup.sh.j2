#!/bin/bash

set -euo pipefail

# Export Restic environment variables
export RESTIC_PASSWORD_FILE="/home/{{ ansible_user }}/.restic/restic-password"
export RESTIC_REPOSITORY="{{ restic_immich_destination_repository }}"
export RESTIC_HOST="{{ inventory_hostname }}"

readonly DOCKER_COMPOSE_DIRECTORY="{{ docker_compose_directory }}"

## immich data paths ----------------------------------------------------------
readonly IMMICH_LIBRARY_PATH="/home/{{ ansible_user }}/{{ immich_folder_name }}/library"
readonly IMMICH_PGDATA_PATH="/home/{{ ansible_user }}/{{ immich_folder_name }}/postgres"

# Define path to restic binary explicitly
RESTIC="/usr/local/bin/restic"

# Function to log messages with timestamps
log() {
  echo "[$(date --iso-8601=seconds)] $*"
}

cleanup() {
  log "Restarting docker compose..."
  docker compose \
    --project-directory="${DOCKER_COMPOSE_DIRECTORY}" \
    up \
    --detach

  log "%s Finished restarting docker...\n"
}

# `trap` ensures that the `cleanup` script is executed, no matter what the outcome
# of this script is. This way we ensure that the container is started even if the
# backup fails.
trap cleanup EXIT

log "Stopping immich containers..."
docker compose \
  --project-directory="${DOCKER_COMPOSE_DIRECTORY}" \
  down

log "Starting restic backup..."
log "Destination: ${RESTIC_REPOSITORY}"

# Initialize repository if it doesn't exist
if ! "$RESTIC" snapshots >/dev/null 2>&1; then
  log "Restic repository not found, initializing..."
  "$RESTIC" init
fi

# Run the backup
log "Running backup..."
"$RESTIC" backup \
  "${IMMICH_LIBRARY_PATH}" \
  "${IMMICH_PGDATA_PATH}"

# Prune old backups
log "Pruning old snapshots..."
"$RESTIC" forget --keep-daily 7 --keep-weekly 4 --keep-monthly 6 --prune

log "Backup complete"
