- name: Ensure Caddy config directory exists
  become: true
  file:
    path: "{{ caddy_config_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Ensure Caddy data directory exists
  become: true
  file:
    path: "{{ caddy_data_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Ensure Caddy config subdirectory directory exists
  become: true
  file:
    path: "{{ caddy_config_dir }}/config"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Template Caddyfile with Vault-based domains
  template:
    src: Caddyfile.j2
    dest: "{{ caddy_config_dir }}/Caddyfile"
    owner: "{{ ansible_user }}"
    mode: '0644'

- name: Debug important variables before running Caddy container
  debug:
    msg:
      - "ansible_user: {{ ansible_user }}"
      - "caddy_config_dir: {{ caddy_config_dir }}"

- name: Stat Caddyfile on remote host
  stat:
    path: "{{ caddy_config_dir }}/Caddyfile"
  register: caddyfile_stat

- name: Debug Caddyfile existence
  debug:
    var: caddyfile_stat.stat.exists

- name: Remove previous Caddy container if it exists
  containers.podman.podman_container:
    name: caddy
    state: absent

- name: Run Caddy in Podman as root to support Let's Encrypt
  become: true
  containers.podman.podman_container:
    name: caddy
    image: docker.io/library/caddy:2
    state: started
    detach: true
    restart_policy: always
    ports:
      - "80:80"
      - "443:443"
    volume:
      - "{{ caddy_config_dir }}/Caddyfile:/etc/caddy/Caddyfile:ro,Z"
      - "{{ caddy_data_dir }}:/data:Z"
      - "{{ caddy_config_dir }}/config:/config:Z"

- name: Verify Caddy container exists
  command: podman ps -a --filter name=caddy
  register: caddy_container_check

- name: Show container status
  debug:
    var: caddy_container_check.stdout_lines
