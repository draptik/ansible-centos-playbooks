#!/bin/bash

set -euo pipefail

# Export Restic environment variables
export RESTIC_PASSWORD_FILE="/home/{{ readeck_os_user }}/.restic/readeck-password"
export RESTIC_REPOSITORY="{{ restic_readeck_destination_repository }}"
export RESTIC_HOST="{{ inventory_hostname }}"
export RESTIC_BACKUP_SOURCE="{{ restic_readeck_backup_source_path }}"

# Define path to restic binary explicitly
RESTIC="/usr/local/bin/restic"

# Function to log messages with timestamps
log() {
  echo "[$(date --iso-8601=seconds)] $*"
}

cleanup() {
  log "Restarting container {{ readeck_container_name }}"
  podman start "{{ readeck_container_name }}"
}

# `trap` ensures that the `cleanup` script is executed, no matter what the outcome
# of this script is. This way we ensure that the container is started even if the
# backup fails.
trap cleanup EXIT

log "Stopping container {{ readeck_container_name }}"
podman stop "{{ readeck_container_name }}"

log "Starting restic backup"
log "Source: ${RESTIC_BACKUP_SOURCE}"
log "Destination: ${RESTIC_REPOSITORY}"

# Initialize repository if it doesn't exist
if ! "$RESTIC" snapshots >/dev/null 2>&1; then
  log "Restic repository not found, initializing..."
  "$RESTIC" init
fi

# Run the backup
log "Running backup..."
"$RESTIC" backup "${RESTIC_BACKUP_SOURCE}"

# Prune old backups
log "Pruning old snapshots..."
"$RESTIC" forget --keep-daily 7 --keep-weekly 4 --keep-monthly 6 --prune

log "Backup complete"
